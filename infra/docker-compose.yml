# NOTA: Este archivo es la fuente de verdad para dev/staging. infra/docker-compose.yml is the single source of truth for Monotickets dev/staging orchestration.
# BEGIN devops-compose
networks:
  monotickets_net:
    name: monotickets_net

volumes:
  pg_data:
  uploads_local:
  pdfs_local:
  media_local:
  metabase_data:

services:
  database:
    image: postgres:16-alpine
    container_name: monotickets_database
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-monotickets}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - monotickets_net
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    container_name: monotickets_redis
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - monotickets_net
    ports:
      - "6379:6379"

  backend-api:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: monotickets_backend_api
    env_file:
      - ../.env
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      monotickets_net:
        aliases:
          - backend
    volumes:
      - uploads_local:/app/uploads
      - pdfs_local:/app/storage/pdfs
      - media_local:/app/storage/media
    healthcheck:
      test:
        ["CMD", "node", "-e", "fetch('http://localhost:8080/health').then(r=>{if(r.status!==200)process.exit(1);}).catch(()=>process.exit(1));"]
      interval: 10s
      timeout: 5s
      retries: 5

  workers:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: monotickets_workers
    command: ["node", "src/worker.js"]
    env_file:
      - ../.env
    depends_on:
      redis:
        condition: service_healthy
      backend-api:
        condition: service_healthy
    networks:
      - monotickets_net
    volumes:
      - uploads_local:/app/uploads
      - pdfs_local:/app/storage/pdfs
      - media_local:/app/storage/media

  pwa:
    profiles: ["dev", "prod"]
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: monotickets_pwa
    env_file:
      - ../.env
    environment:
      FRONTEND_PORT: ${PWA_PORT:-3000}
      FRONTEND_APP: pwa
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend-api:
        condition: service_healthy
    ports:
      - "${PWA_PORT:-3000}:${PWA_PORT:-3000}"
    networks:
      monotickets_net:
        aliases:
          - frontend
    healthcheck:
      test:
        ["CMD", "node", "-e", "fetch('http://localhost:${PWA_PORT:-3000}/').then(r=>{if(r.status!==200)process.exit(1);}).catch(()=>process.exit(1));"]
      interval: 10s
      timeout: 5s
      retries: 5

  dashboard:
    profiles: ["dev", "prod"]
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: monotickets_dashboard
    env_file:
      - ../.env
    environment:
      FRONTEND_PORT: ${DASHBOARD_PORT:-3100}
      FRONTEND_APP: dashboard
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend-api:
        condition: service_healthy
    ports:
      - "${DASHBOARD_PORT:-3100}:${DASHBOARD_PORT:-3100}"
    networks:
      - monotickets_net
    healthcheck:
      test:
        ["CMD", "node", "-e", "fetch('http://localhost:${DASHBOARD_PORT:-3100}/').then(r=>{if(r.status!==200)process.exit(1);}).catch(()=>process.exit(1));"]
      interval: 10s
      timeout: 5s
      retries: 5

  metabase:
    image: metabase/metabase:latest
    container_name: monotickets_metabase
    depends_on:
      database:
        condition: service_healthy
    environment:
      MB_DB_FILE: /metabase-data/metabase.db
    volumes:
      - metabase_data:/metabase-data
    ports:
      - "3002:3000"
    restart: unless-stopped
    networks:
      - monotickets_net

  tests:
    image: node:20-alpine
    container_name: monotickets_tests
    working_dir: /workspace
    env_file:
      - ../.env
    volumes:
      - ..:/workspace:delegated
    networks:
      - monotickets_net
    depends_on:
      backend-api:
        condition: service_healthy
      pwa:
        condition: service_healthy
    command: ["node", "tests/scripts/run-e2e.js"]
# END devops-compose
