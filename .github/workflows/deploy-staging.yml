name: Deploy Staging

on:
  push:
    branches: [develop]
  workflow_run:
    workflows: ["Build & Push"]
    types: [completed]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Override image tag (defaults to latest successful SHA)"
        required: false

permissions:
  contents: read

jobs:
  notify:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - run: echo 'Staging deploys execute after the Build & Push workflow succeeds.'

  deploy:
    if: github.event_name != 'push' && (github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Determine release metadata
        id: meta
        env:
          DEFAULT_BRANCH: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_branch || github.ref_name }}
          DEFAULT_SHA: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}
          INPUT_TAG: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.image_tag || '' }}
        run: |
          SHA="$DEFAULT_SHA"
          BRANCH="$DEFAULT_BRANCH"
          if [ -n "$INPUT_TAG" ]; then
            SHA="$INPUT_TAG"
          fi
          echo "sha=${SHA}" >> "$GITHUB_OUTPUT"
          echo "image_tag=${SHA}" >> "$GITHUB_OUTPUT"
          echo "branch=${BRANCH}" >> "$GITHUB_OUTPUT"

      - name: Verify CI & TestSprite
        id: ci_status
        uses: actions/github-script@v7
        env:
          TARGET_SHA: ${{ steps.meta.outputs.sha }}
        with:
          script: |
            const sha = process.env.TARGET_SHA;
            if (!sha) {
              core.setFailed('Missing target SHA for deployment.');
              return;
            }

            const findRunForSha = async (candidateSha) => {
              const { data } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'ci.yml',
                per_page: 50,
              });
              return data.workflow_runs.find((r) => r.head_sha === candidateSha);
            };

            let run = await findRunForSha(sha);

            if (!run) {
              core.info(`CI workflow not found for ${sha}; attempting associated PR head commits.`);
              const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: sha,
              });
              for (const pr of prs) {
                const candidateSha = pr.head && pr.head.sha;
                if (!candidateSha) {
                  continue;
                }
                run = await findRunForSha(candidateSha);
                if (run) {
                  core.info(`Using CI workflow from PR #${pr.number} (head ${candidateSha}) to validate ${sha}.`);
                  break;
                }
              }
            }

            if (!run) {
              core.setFailed(`CI workflow not found for ${sha}`);
              return;
            }

            if (run.conclusion !== 'success') {
              core.setFailed(`CI workflow for ${sha} did not succeed (state: ${run.conclusion}).`);
              return;
            }

            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run.id,
              per_page: 50,
            });

            // BEGIN devops-ci
            const requiredJobs = ['Smoke', 'E2E', 'TestSprite QA'];
            for (const jobName of requiredJobs) {
              const job = jobs.data.jobs.find((entry) => entry.name === jobName);
              if (!job || job.conclusion !== 'success') {
                core.setFailed(`${jobName} did not succeed; aborting deploy.`);
                return;
              }
            }
            // END devops-ci

            core.info(`CI checks (lint, unit, smoke, e2e, TestSprite) succeeded for ${sha}.`);

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Prepare SSH key
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          install -m 700 -d ~/.ssh
          printf '%s\n' "$SSH_KEY" > ~/.ssh/id_staging
          chmod 600 ~/.ssh/id_staging

      - name: Deploy to staging
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY_PATH: ~/.ssh/id_staging
          REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
          IMAGE_TAG: ${{ steps.meta.outputs.image_tag }}
        run: ./infra/scripts/deploy_staging.sh

      - name: Apply database migrations
        env:
          DB_HOST: ${{ secrets.STAGING_DB_HOST }}
          DB_PORT: ${{ secrets.STAGING_DB_PORT }}
          DB_USER: ${{ secrets.STAGING_DB_USER }}
          DB_NAME: ${{ secrets.STAGING_DB_NAME }}
          DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
        run: ./infra/scripts/apply-migrations.sh

      - name: Refresh staging KPI views
        env:
          DB_HOST: ${{ secrets.STAGING_DB_HOST }}
          DB_PORT: ${{ secrets.STAGING_DB_PORT }}
          DB_USER: ${{ secrets.STAGING_DB_USER }}
          DB_NAME: ${{ secrets.STAGING_DB_NAME }}
          PGPASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
        run: ./infra/refresh-bi-views.sh

      - name: Update Metabase dashboards
        env:
          METABASE_SITE_URL: ${{ secrets.METABASE_SITE_URL }}
          METABASE_SESSION_TOKEN: ${{ secrets.METABASE_SESSION_TOKEN }}
          METABASE_API_KEY: ${{ secrets.METABASE_API_KEY }}
          METABASE_DATABASE_ID: ${{ secrets.METABASE_DATABASE_ID }}
          METABASE_ORGANIZER_GROUP_ID: ${{ secrets.METABASE_ORGANIZER_GROUP_ID }}
          METABASE_DIRECTOR_GROUP_ID: ${{ secrets.METABASE_DIRECTOR_GROUP_ID }}
        run: npm run setup:metabase

      - name: Verify backend health
        env:
          HEALTH_URL: ${{ secrets.STAGING_BACKEND_HEALTH_URL }}
        run: curl -fsS "$HEALTH_URL"

      - name: Verify frontend health
        env:
          HEALTH_URL: ${{ secrets.STAGING_FRONTEND_HEALTH_URL }}
        run: curl -fsS "$HEALTH_URL"

      - name: Verify pg_cron refresh jobs
        env:
          DB_HOST: ${{ secrets.STAGING_DB_HOST }}
          DB_PORT: ${{ secrets.STAGING_DB_PORT }}
          DB_USER: ${{ secrets.STAGING_DB_USER }}
          DB_NAME: ${{ secrets.STAGING_DB_NAME }}
          PGPASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
        run: |
          set -euo pipefail
          job_id=$(psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -t -A -c "SELECT jobid FROM cron.job WHERE command ILIKE '%mv_wa_free_ratio_daily%' LIMIT 1")
          if [[ -z "$job_id" ]]; then
            echo "No pg_cron job found for mv_wa_free_ratio_daily" >&2
            exit 1
          fi
          last_success=$(psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -t -A -c "SELECT success FROM cron.job_run_details WHERE jobid = $job_id ORDER BY start_time DESC LIMIT 1")
          if [[ "$last_success" != "t" ]]; then
            echo "Latest pg_cron execution for job $job_id did not succeed" >&2
            exit 1
          fi

      - name: Deployment summary
        run: echo "Deployed image tag ${{ steps.meta.outputs.image_tag }} to staging (branch ${{ steps.meta.outputs.branch }})."
