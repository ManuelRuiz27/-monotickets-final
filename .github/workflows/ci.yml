name: CI

on:
  pull_request:
    branches: [develop, main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm ci
      - name: Run test suite
        run: npm run test:ci

  # BEGIN devops-ci
  smoke:
    name: Smoke
    runs-on: ubuntu-latest
    needs: unit-tests
    env:
      COMPOSE_FILE: infra/docker-compose.yml
      COMPOSE_PROFILES: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install dependencies
        run: npm ci
      - name: Start smoke stack
        run: |
          docker compose -f "${COMPOSE_FILE}" --profile "${COMPOSE_PROFILES}" pull database redis backend-api pwa dashboard || true
          docker compose -f "${COMPOSE_FILE}" --profile "${COMPOSE_PROFILES}" up -d database redis backend-api pwa dashboard
      - name: Wait for readiness
        env:
          BACKEND_URL: http://localhost:8080/health
          FRONTEND_URL: http://localhost:3000/
        run: npm run smoke:readiness
      - name: Smoke check services
        env:
          BACKEND_URL: http://localhost:8080/health
          FRONTEND_URL: http://localhost:3000/
        run: npm run smoke:services
      - name: Check dashboard availability
        run: curl -fsS http://localhost:3100/ >/dev/null
      - name: Tear down services
        if: always()
        run: docker compose -f "${COMPOSE_FILE}" --profile "${COMPOSE_PROFILES}" down -v

  e2e:
    name: E2E
    runs-on: ubuntu-latest
    needs: smoke
    env:
      COMPOSE_FILE: infra/docker-compose.yml
      COMPOSE_PROFILES: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install dependencies
        run: npm ci
      - name: Start E2E stack
        run: |
          docker compose -f "${COMPOSE_FILE}" --profile "${COMPOSE_PROFILES}" pull database redis backend-api pwa dashboard || true
          docker compose -f "${COMPOSE_FILE}" --profile "${COMPOSE_PROFILES}" up -d database redis backend-api pwa dashboard
      - name: Wait for readiness
        env:
          BACKEND_URL: http://localhost:8080/health
          FRONTEND_URL: http://localhost:3000/
        run: npm run smoke:readiness
      - name: Run E2E tests
        run: npm run test:e2e:all
      - name: Collect artifacts
        if: always()
        run: npm run test:post
      - name: Upload JUnit reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-reports
          path: reports/junit/**/*.xml
          if-no-files-found: warn
          retention-days: 10
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/**
          if-no-files-found: warn
          retention-days: 10
      - name: Upload E2E artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: tests/artifacts/**
          if-no-files-found: warn
          retention-days: 10
      - name: Tear down services
        if: always()
        run: docker compose -f "${COMPOSE_FILE}" --profile "${COMPOSE_PROFILES}" down -v
  # END devops-ci

  testsprite:
    name: TestSprite QA
    runs-on: ubuntu-latest
    needs:
      - lint
      - unit-tests
      # BEGIN devops-ci
      - e2e
      # END devops-ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm ci
      - name: Execute TestSprite smoke tests
        env:
          TESTSPRITE_API_KEY: ${{ secrets.TESTSPRITE_API_KEY }}
        run: npx testsprite run --config .testsprite.yml
      - name: Upload TestSprite report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: testsprite-report
          path: testsprite-report/
          if-no-files-found: ignore
